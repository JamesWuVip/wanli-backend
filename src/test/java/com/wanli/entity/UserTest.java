package com.wanli.entity;

import com.wanli.base.TestBase;
import com.wanli.entity.UserRole;
import com.wanli.entity.UserStatus;
import com.wanli.util.TestDataFactory;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.BeforeEach;
import org.springframework.boot.test.context.SpringBootTest;

import java.time.OffsetDateTime;
import java.util.UUID;

import static org.assertj.core.api.Assertions.*;

/**
 * User实体单元测试
 */
@SpringBootTest
@DisplayName("User实体测试")
class UserTest extends TestBase {

    private User user;

    @BeforeEach
    void setUp() {
        user = TestDataFactory.createDefaultUser();
    }

    @Test
    @DisplayName("创建用户 - 成功")
    void createUser_Success() {
        // Given
        User newUser = new User();
        newUser.setUsername("testuser");
        newUser.setEmail("test@example.com");
        newUser.setPasswordHash("hashedPassword");
        newUser.setFullName("Test User");
        newUser.setRole(UserRole.STUDENT);
        newUser.setStatus(UserStatus.ACTIVE);

        // Then
        assertThat(newUser.getUsername()).isEqualTo("testuser");
        assertThat(newUser.getEmail()).isEqualTo("test@example.com");
        assertThat(newUser.getPasswordHash()).isEqualTo("hashedPassword");
        assertThat(newUser.getFullName()).isEqualTo("Test User");
        assertThat(newUser.getRole()).isEqualTo(UserRole.STUDENT);
        assertThat(newUser.getStatus()).isEqualTo(UserStatus.ACTIVE);
    }

    @Test
    @DisplayName("用户ID自动生成")
    void userId_AutoGenerated() {
        // Given
        User newUser = new User();
        
        // When - 模拟JPA的@PrePersist行为
        newUser.onCreate();
        
        // Then
        assertThat(newUser.getId()).isNotNull();
        assertThat(newUser.getId()).isInstanceOf(UUID.class);
    }

    @Test
    @DisplayName("时间戳自动设置")
    void timestamps_AutoSet() {
        // Given
        User newUser = new User();
        java.time.LocalDateTime before = java.time.LocalDateTime.now().minusSeconds(1);
        
        // When - 模拟JPA的@PrePersist行为
        newUser.onCreate();
        java.time.LocalDateTime after = java.time.LocalDateTime.now().plusSeconds(1);
        
        // Then
        assertThat(newUser.getCreatedAt()).isBetween(before, after);
        assertThat(newUser.getUpdatedAt()).isBetween(before, after);
    }

    @Test
    @DisplayName("检查用户是否被锁定 - 未锁定")
    void isLocked_NotLocked() {
        // Given
        user.setLockedUntil(null);
        
        // When
        boolean isLocked = user.isLocked();
        
        // Then
        assertThat(isLocked).isFalse();
    }

    @Test
    @DisplayName("检查用户是否被锁定 - 锁定时间已过期")
    void isLocked_LockExpired() {
        // Given
        user.setLockedUntil(OffsetDateTime.now().minusHours(1));
        
        // When
        boolean isLocked = user.isLocked();
        
        // Then
        assertThat(isLocked).isFalse();
    }

    @Test
    @DisplayName("检查用户是否被锁定 - 仍在锁定期")
    void isLocked_StillLocked() {
        // Given
        user.setLockedUntil(OffsetDateTime.now().plusHours(1));
        
        // When
        boolean isLocked = user.isLocked();
        
        // Then
        assertThat(isLocked).isTrue();
    }

    @Test
    @DisplayName("检查用户是否激活 - 激活状态")
    void isActive_ActiveStatus() {
        // Given
        user.setStatus(UserStatus.ACTIVE);
        
        // When
        boolean isActive = user.isActive();
        
        // Then
        assertThat(isActive).isTrue();
    }

    @Test
    @DisplayName("检查用户是否激活 - 非激活状态")
    void isActive_InactiveStatus() {
        // Given
        user.setStatus(UserStatus.INACTIVE);
        
        // When
        boolean isActive = user.isActive();
        
        // Then
        assertThat(isActive).isFalse();
    }

    @Test
    @DisplayName("重置登录尝试次数")
    void resetLoginAttempts_Success() {
        // Given
        user.setLoginAttempts(5);
        
        // When
        user.resetLoginAttempts();
        
        // Then
        assertThat(user.getLoginAttempts()).isEqualTo(0);
    }

    @Test
    @DisplayName("增加登录尝试次数")
    void incrementLoginAttempts_Success() {
        // Given
        user.setLoginAttempts(2);
        
        // When
        user.incrementLoginAttempts();
        
        // Then
        assertThat(user.getLoginAttempts()).isEqualTo(3);
    }

    @Test
    @DisplayName("更新最后登录时间")
    void updateLastLoginTime_Success() {
        // Given
        OffsetDateTime before = OffsetDateTime.now().minusSeconds(1);
        OffsetDateTime after = OffsetDateTime.now().plusSeconds(1);
        
        // When
        user.updateLastLoginTime();
        
        // Then
        assertThat(user.getLastLoginAt()).isBetween(before, after);
    }

    @Test
    @DisplayName("激活用户")
    void activate_Success() {
        // Given
        user.setStatus(UserStatus.INACTIVE);
        
        // When
        user.activate();
        
        // Then
        assertThat(user.getStatus()).isEqualTo(UserStatus.ACTIVE);
    }

    @Test
    @DisplayName("用户构建器 - 创建用户")
    void userBuilder_CreateUser() {
        // When
        User builtUser = User.builder()
                .username("builderuser")
                .email("builder@example.com")
                .passwordHash("hashedPassword")
                .fullName("Builder User")
                .role(UserRole.HQ_TEACHER)
                .status(UserStatus.ACTIVE)
                .build();
        
        // 模拟JPA的@PrePersist行为
        builtUser.onCreate();
        
        // Then
        assertThat(builtUser.getUsername()).isEqualTo("builderuser");
        assertThat(builtUser.getEmail()).isEqualTo("builder@example.com");
        assertThat(builtUser.getPasswordHash()).isEqualTo("hashedPassword");
        assertThat(builtUser.getFullName()).isEqualTo("Builder User");
        assertThat(builtUser.getRole()).isEqualTo(UserRole.HQ_TEACHER);
        assertThat(builtUser.getStatus()).isEqualTo(UserStatus.ACTIVE);
        assertThat(builtUser.getId()).isNotNull();
        assertThat(builtUser.getCreatedAt()).isNotNull();
        assertThat(builtUser.getUpdatedAt()).isNotNull();
    }

    @Test
    @DisplayName("用户字段验证 - 用户名不能为空")
    void validation_UsernameNotNull() {
        // Given
        User invalidUser = new User();
        invalidUser.setUsername(null);
        invalidUser.setEmail("test@example.com");
        invalidUser.setPasswordHash("password");
        
        // Then - 这里我们只是验证字段设置，实际的Bean Validation会在持久化时触发
        assertThat(invalidUser.getUsername()).isNull();
    }

    @Test
    @DisplayName("用户字段验证 - 邮箱不能为空")
    void validation_EmailNotNull() {
        // Given
        User invalidUser = new User();
        invalidUser.setUsername("testuser");
        invalidUser.setEmail(null);
        invalidUser.setPasswordHash("password");
        
        // Then
        assertThat(invalidUser.getEmail()).isNull();
    }

    @Test
    @DisplayName("用户equals和hashCode测试")
    void equalsAndHashCode_Test() {
        // Given
        User user1 = TestDataFactory.createDefaultUser();
        User user2 = TestDataFactory.createDefaultUser();
        
        // 设置完全相同的属性
        user2.setId(user1.getId());
        user2.setUsername(user1.getUsername());
        user2.setEmail(user1.getEmail());
        user2.setPasswordHash(user1.getPasswordHash());
        user2.setFullName(user1.getFullName());
        user2.setRole(user1.getRole());
        user2.setStatus(user1.getStatus());
        user2.setLastLoginAt(user1.getLastLoginAt());
        user2.setLoginAttempts(user1.getLoginAttempts());
        user2.setLockedUntil(user1.getLockedUntil());
        user2.setCreatedAt(user1.getCreatedAt());
        user2.setUpdatedAt(user1.getUpdatedAt());
        user2.setCreatedBy(user1.getCreatedBy());
        user2.setUpdatedBy(user1.getUpdatedBy());
        
        // Then
        assertThat(user1).isEqualTo(user2);
        assertThat(user1.hashCode()).isEqualTo(user2.hashCode());
    }

    @Test
    @DisplayName("用户toString测试")
    void toString_Test() {
        // When
        String userString = user.toString();
        
        // Then
        assertThat(userString).contains("User");
        assertThat(userString).contains(user.getUsername());
        assertThat(userString).contains(user.getEmail());
    }
}