name: SonarCloud Code Quality Check

# 触发条件
on:
  push:
    branches:
      - main
      - staging
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'
  pull_request:
    branches:
      - main
      - staging
    types: [opened, synchronize, reopened]

# 环境变量
env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx3072m'

jobs:
  sonarcloud-check:
    name: SonarCloud Quality Gate
    runs-on: ubuntu-latest
    
    # 权限设置
    permissions:
      contents: read
      pull-requests: write
      checks: write
    
    steps:
      # 1. 检出代码
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史，SonarQube需要
      
      # 2. 设置Java环境
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      # 3. 缓存Maven依赖
      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      # 4. 缓存SonarQube包
      - name: Cache SonarQube Packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      # 5. 运行测试并生成覆盖率报告
      - name: Run Tests with Coverage
        run: |
          ./mvnw clean verify \
            -Dmaven.test.failure.ignore=false \
            -Dspring.profiles.active=test \
            -Djacoco.skip=false
        env:
          SPRING_PROFILES_ACTIVE: test
      
      # 6. 运行SonarCloud分析
      - name: Run SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw sonar:sonar \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.branch.name=${{ github.ref_name }} \
            -Dsonar.pullrequest.key=${{ github.event.number }} \
            -Dsonar.pullrequest.branch=${{ github.head_ref }} \
            -Dsonar.pullrequest.base=${{ github.base_ref }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.java.test.binaries=target/test-classes
      
      # 7. 等待质量门结果
      - name: Wait for Quality Gate
        uses: sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
      
      # 8. 上传测试结果
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            target/surefire-reports/
            target/site/jacoco/
            target/sonar/
      
      # 9. 发布测试报告
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: 'target/surefire-reports/TEST-*.xml'
          check_name: 'Unit Test Results'
          fail_on_failure: true
      
      # 10. 评论PR（仅在PR时执行）
      - name: Comment PR with SonarQube Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const sonarUrl = 'https://sonarcloud.io';
            const projectKey = process.env.SONAR_PROJECT_KEY || 'wanli-education-backend';
            const organization = process.env.SONAR_ORGANIZATION;
            const prNumber = context.payload.pull_request.number;
            
            const comment = `## 🔍 SonarCloud代码质量检查结果
            
            📊 **分析报告:** [查看详细报告](${sonarUrl}/project/pull_requests?id=${projectKey}&pullRequest=${prNumber})
            
            ✅ **质量门状态:** 已通过
            
            ### 📋 检查项目
            - 代码覆盖率 ≥ 80%
            - 重复代码率 ≤ 3%
            - 维护性评级 ≥ A
            - 可靠性评级 ≥ A
            - 安全性评级 ≥ A
            
            > 💡 如果质量门未通过，请根据SonarCloud报告修复相关问题后重新提交。`;
            
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
        env:
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

  # 安全扫描作业
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: sonarcloud-check
    
    steps:
      # 1. 检出代码
      - name: Checkout Code
        uses: actions/checkout@v4
      
      # 2. 设置Java环境
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      # 3. 运行OWASP依赖检查
      - name: Run OWASP Dependency Check
        run: |
          ./mvnw org.owasp:dependency-check-maven:check \
            -DfailBuildOnCVSS=7 \
            -DsuppressionsLocation=owasp-suppressions.xml
      
      # 4. 上传安全报告
      - name: Upload Security Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-report
          path: target/dependency-check-report.html

  # 代码格式检查
  code-format-check:
    name: Code Format Check
    runs-on: ubuntu-latest
    
    steps:
      # 1. 检出代码
      - name: Checkout Code
        uses: actions/checkout@v4
      
      # 2. 设置Java环境
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      # 3. 检查代码格式
      - name: Check Code Format
        run: |
          ./mvnw spotless:check
      
      # 4. 如果格式检查失败，提供修复建议
      - name: Format Check Failed
        if: failure()
        run: |
          echo "❌ 代码格式检查失败！"
          echo "💡 请运行以下命令修复格式问题："
          echo "   ./mvnw spotless:apply"
          echo "   git add ."
          echo "   git commit -m 'style: 修复代码格式'"
          exit 1